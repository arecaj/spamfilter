DROP TABLE IF EXISTS BLACKLIST CASCADE;
CREATE TABLE BLACKLIST(
  id_bl INT PRIMARY KEY AUTO_INCREMENT,
  token CHARACTER LARGE OBJECT NOT NULL
);

DROP TABLE IF EXISTS MESSAGES CASCADE;
CREATE TABLE MESSAGES(
  id_msg int PRIMARY KEY AUTO_INCREMENT,
  message CHARACTER LARGE OBJECT NOT NULL,
  nb_is_spam BOOLEAN
);

DROP TABLE IF EXISTS NAIVE_BAYES_TOKENS;
CREATE TABLE NAIVE_BAYES_TOKENS(
    id_token int PRIMARY KEY AUTO_INCREMENT,
    token VARCHAR(100) NOT NULL UNIQUE,
    spam_count INT,
    ham_count INT,
    prob_spam DOUBLE,
    prob_ham DOUBLE,
    prob_bern DOUBLE
);

DROP TABLE IF EXISTS BERNOULLI_NB;
CREATE TABLE BERNOULLI_NB(
    id_b INT PRIMARY KEY AUTO_INCREMENT,
    spam_count INT,
    prob_spam DOUBLE,
    id_token INT,
    FOREIGN KEY (id_token) REFERENCES NAIVE_BAYES_TOKENS(id_token)
);

DROP TABLE IF EXISTS BLACKLIST_MSG_EVAL;
CREATE TABLE BLACKLIST_MSG_EVAL(
  id_bl_msg int PRIMARY KEY AUTO_INCREMENT,
  id_bl INT,
  id_msg int,
  is_spam BOOLEAN,
  FOREIGN KEY (id_bl) REFERENCES BLACKLIST(id_bl) ON DELETE CASCADE,
  FOREIGN KEY (id_msg) REFERENCES MESSAGES(id_msg) ON DELETE CASCADE
);

insert into MESSAGES ( message, nb_is_spam ) SELECT message, convert(nb_is_spam, BOOLEAN) FROM CSVREAD( '~/Schreibtisch/spam_or_not_spam.csv/spam_dataset_test.csv' );
